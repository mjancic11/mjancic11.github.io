fill = "white") +
scale_x_continuous(name = "", # brez imena, ker ga bo mel boxplot
limits = c(20, 80), # isti x limit, da je poravnana os
breaks = breaks2,
expand = c(0,0)) + # isti breaki v obeh plotih
ylab("Number of records") +
theme_classic() +
theme(axis.text = element_text(size = 25), # velikost teksta številk
axis.title = element_text(size = 25), # velikost teksta imena osi
axis.title.y = element_text(margin = margin(r = 15)), # odmik teksta od y
plot.margin = unit(c(0, 0, 0, 0), "cm"), # zmanjšaš margin okol, da sta bolj skupaj
axis.text.x=element_blank(),
axis.text.y = element_text(colour = "black"))
green_histogram
green_histogram <-
ggplot(greens, aes(x = CCL)) +
geom_histogram(breaks = breaks, color = "black", fill = "white") +
scale_x_continuous(name = "", # remove axis name
limits = c(20, 80), # set the x limit, same as for boxplot
breaks = breaks, # set the breaks, same as for boxplot
expand = c(0,0)) +
ylab("Number of records") +
theme_classic() + # remove a lot of unnecesary noise
theme(axis.text = element_text(size = 25, colour = "black"), # font size
axis.title = element_text(size = 25), # velikost teksta imena osi
axis.title.y = element_text(margin = margin(r = 15)), # odmik teksta od y
plot.margin = unit(c(0, 0, 0, 0), "cm"), # zmanjšaš margin okol, da sta bolj skupaj
axis.text.x = element_blank())
green_histogram
greens_boxplot <-
ggplot(greens, aes(y = CCL)) +
geom_boxplot(outlier.size = 5) + # increase the size of outlier points, so they are better visible
coord_flip() + # flip the boxplot so it is horizontal
xlab("") +
theme_classic() +
theme(axis.text.y = element_blank(), # removes y axis labels
axis.ticks.y = element_blank(), # removes y axis ticks
axis.line.y = element_blank(), # removes y axis line
axis.text = element_text(size = 25, color = "black"), # same as above
axis.title = element_text(size = 25), # same as above
axis.title.x = element_text(margin = margin(t = 15)),  # same as above, only on x axis
plot.margin = unit(c(0, 0, 0, 0), "cm")) + # same as above
scale_y_continuous(name = "Curved Carapace Length (cm)", # rename y axis
limits = c(20, 80), # same as above
breaks = breaks)  # same as above
greens_boxplot
greens_histogram <-
ggplot(greens, aes(x = CCL)) +
geom_histogram(breaks = breaks, color = "black", fill = "white") +
scale_x_continuous(name = "", # remove axis name
limits = c(20, 80), # set the x limit, same as for boxplot
breaks = breaks, # set the breaks, same as for boxplot
expand = c(0,0)) +
ylab("Number of records") +
theme_classic() + # remove a lot of unnecesary noise
theme(axis.text = element_text(size = 25, # font size and color of the axis
colour = "black"), # labels (numbers)
axis.title = element_text(size = 25), # font size of the axis title
axis.title.y = element_text(margin = margin(r = 15)), # move axis title away from the labels
plot.margin = unit(c(0, 0, 0, 0), "cm"),
# reduce margin around the plot, so there is less white space when adding boxplot
axis.text.x = element_blank()) # remove labels of x axis, as they will be the same in boxplot
library(cowplot)
plot_grid(greens_histogram,
greens_boxplot,
ncol = 1,
align = "v", axis = "lr", # vertical alignment
rel_heights = c(3, 1),
labels = "AUTO",
label_size = 25) # text size of the label
?plot_grid
# Plotly histogram
greens %>%
plotly::plot_ly(data = .,
x = ~CCL,
type = "histogram",
marker = list(color = "#2C3E50"),
xaxis = list(title = 'Curved carapace length (cm)'),
yaxis = list(title = 'Frequency')
)
# Plotly histogram
greens %>%
plotly::plot_ly(data = .,
x = ~CCL,
type = "histogram",
marker = list(color = "#2C3E50")) %>%
layout(xaxis = list(title = 'Curved carapace length (cm)'),
yaxis = list(title = 'Frequency')
)
# Plotly histogram
greens %>%
plotly::plot_ly(data = .,
x = ~CCL,
type = "histogram",
marker = list(color = "#2C3E50")) %>%
plot_ly::layout(xaxis = list(title = 'Curved carapace length (cm)'),
yaxis = list(title = 'Frequency'))
# Plotly histogram
greens %>%
plotly::plot_ly(data = .,
x = ~CCL,
type = "histogram",
marker = list(color = "#2C3E50")) %>%
plotly::layout(xaxis = list(title = 'Curved carapace length (cm)'),
yaxis = list(title = 'Frequency'))
q()
## check if package install, if not install package
if(!require("rgbif")) install.packages("rgbif")
library(rgbif)
name_suggest(q = "Nudibranchia")
nudibranch_Adriatic <-
occ_search(geometry = 'POLYGON((18.46 40.05, 22.03 42.26, 13.89 46.87, 8.68 46.36, 18.46 40.05))',
orderKey = 980,
limit = 5000)
nudi_Adriatic_data <- nudibranch_Adriatic$data %>%
dplyr::filter(stateProvince %in% c("Istarska", "Obalno-kraška"))
unique(nudi_Adriatic_data$species)
# library(leaflet)
# green_locs <- read.csv("green_locs_adr.csv", sep = ";",
#                        stringsAsFactors = TRUE)
#
# pal <- colorFactor(palette = c("yellow", "orange", "red"),
#                    domain = green_locs$Period)
#
leaflet(nudi_Adriatic_data) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lat = ~decimalLatitude,
lng = ~decimalLongitude,
label = ~species)
View(nudi_Adriatic_data)
physalus_gbif <- occ_search(scientificName = "Balaenoptera physalus")
class(physalus_gbif)
name_suggest(q = "Balaenoptera physalus")
occ_count(taxonKey = 2440718)
name_suggest(q = "Balaenoptera physalus")
q()
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
# To install the latest version from Github:
# install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
install.packages("rayshader")
library(rayshader)
library(geodata)
slovenija_DMV <- elevation_30s(country = "SI", path = "01_data")
library(rayshader)
elmat <- raster_to_matrix(slovenija_DMV)
elmat <- raster_to_matrix(raster::raster(slovenija_DMV))
```{r}
elmat %>%
sphere_shade(texture = "desert") %>%
plot_map()
elmat %>%
sphere_shade(sunangle = 45) %>%
plot_map()
?sphere_shade
elmat %>%
sphere_shade(texture = 'unicorn', sunangle = 45) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'imhof2', sunangle = 45) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'imhof3', sunangle = 45) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'imhof2', sunangle = 45) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'imhof2', sunangle = 45) %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_map()
elmat %>%
sphere_shade(texture = 'desert', sunangle = 45) %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_map()
elmat %>%
elmat %>%
sphere_shade(texture = 'desert', sunangle = 45) %>%
add_water(detect_water(elmat), color = "desert") %>%
add_shadow(ray_shade(elmat), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'desert') %>%
add_water(detect_water(elmat), color = "desert") %>%
add_shadow(ray_shade(elmat), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'desert') %>%
add_water(detect_water(elmat), color = "desert") %>%
add_shadow(ray_shade(elmat), 0.5) %>%
#    add_shadow(ambient_shade(elmat), 0) %>%
plot_map()
elmat %>%
sphere_shade(texture = 'desert') %>%
add_water(detect_water(elmat), color = "desert") %>%
#    add_shadow(ray_shade(elmat), 0.5) %>%
add_shadow(ambient_shade(elmat), 0) %>%
plot_map()
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 10, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
Sys.sleep(0.2)
render_snapshot()
?plot_3d
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 1, fov = 0, theta = 135, zoom = 0.75, phi = 45, windowsize = c(1000, 800))
Sys.sleep(0.2)
render_snapshot()
elmat %>%
sphere_shade(texture = "desert") %>%
add_water(detect_water(elmat), color = "desert") %>%
plot_3d(elmat, zscale = 1, fov = 0, theta = 135, zoom = 1, phi = 45, windowsize = c(1000, 800))
Sys.sleep(0.2)
render_snapshot()
render_snapshot()
q()
library(leaflet)
leaflet(physalus) %>%
addTiles() %>%
physalus_gbif <- occ_search(scientificName = "Balaenoptera physalus")
library(rgbif)
physalus_gbif <- occ_search(scientificName = "Balaenoptera physalus")
physalus <- physalus_gbif$data
library(leaflet)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude)
?addAwesomeMarkers
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = "fa-whale")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = "fas fa-whale")
?awesomeIconList
?makeAwesomeIcon
whale <- makeAwesomeIcon(icon = "fa whale",
library = "fas")
whale <- makeAwesomeIcon(icon = "fa-whale",
library = "fa")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
fa-
whale <- makeAwesomeIcon(icon = "whale",
library = "fa")
whale <- makeAwesomeIcon(icon = "fa-whale",
library = "fa")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- makeAwesomeIcon(icon = "star"#,
#library = "fa"
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- makeAwesomeIcon(icon = "fa-whale",
library = "fa",
color = "white")
whale <- makeAwesomeIcon(icon = "fa-whale",
library = "fa",
iconColor = "white")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- AwesomeIcon(icon = "fa-whale",
library = "fa",
iconColor = "white")
whale <- AwesomeIcons(icon = "fa-whale",
library = "fa",
iconColor = "white")
whale <- awesomeIcons(icon = "fa-whale",
library = "fa",
iconColor = "white")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- awesomeIcons(icon = "fa-thin fa-whale",
library = "fa",
iconColor = "white")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
# markerColor = getColor(df.20)
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = icons)
pub = makeAwesomeIcon(
icon = 'beer',
library = 'fa',
iconColor = 'gold',
markerColor = 'red',
iconRotate = 10
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = pub)
pub = makeAwesomeIcon(
icon = 'whale',
library = 'fa',
iconColor = 'gold',
markerColor = 'red',
iconRotate = 10
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = pub)
pub = makeAwesomeIcon(
icon = 'fa-whale',
library = 'fa',
iconColor = 'gold',
markerColor = 'red',
iconRotate = 10
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = pub)
pub = makeAwesomeIcon(
icon = 'apple',
library = 'fa',
iconColor = 'gold',
markerColor = 'red',
iconRotate = 10
)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = pub)
whale <- awesomeIcons(icon = "fish",
library = "fa",
iconColor = "white")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = pub)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- awesomeIcons(icon = "bird",
library = "fa",
iconColor = "white")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- awesomeIcons(icon = "bird",
library = "fa",
iconColor = "white",
markerColor = "blue")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- awesomeIcons(icon = "beer",
library = "fa",
iconColor = "white",
markerColor = "blue")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
library(png)
?makeIcon
whale <-
awesomeIcons(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png",
iconWidth = 38,
iconHeight = 95)
whale <- makeIcon(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png",
iconWidth = 38,
iconHeight = 95)
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale
whale <- makeIcon(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png")
leaflet(physalus) %>%
addTiles() %>%
addAwesomeMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
leaflet(physalus) %>%
addTiles() %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- makeIcon(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png",
iconWidth = 38, iconHeight = 15)
leaflet(physalus) %>%
addTiles() %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- makeIcon(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png",
iconWidth = 15, iconHeight = 15)
leaflet(physalus) %>%
addTiles() %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
whale <- makeIcon(iconUrl = "https://cdn-icons-png.flaticon.com/512/2834/2834539.png",
iconWidth = 20, iconHeight = 20)
leaflet(physalus) %>%
addTiles() %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
# install.packages("devtools")
devtools::install_github("hadley/emo")
leaflet(physalus) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale)
leaflet(physalus) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(lng = ~ decimalLongitude,
lat = ~ decimalLatitude,
icon = whale,
label = ~country)
nudibranch_Adriatic <-
occ_search(geometry = 'POLYGON((18.46 40.05, 22.03 42.26, 13.89 46.87, 8.68 46.36, 18.46 40.05))',
orderKey = 980,
limit = 5000)
nudi_Adriatic_data <- nudibranch_Adriatic$data
nudibranch <-
makeIcon(iconUrl = "https://images.squarespace-cdn.com/content/v1/5a55df2e9f8dce980ddb50ea/1515818936193-QIFQGV59CKSO9ZFX4GAD/Icon-09.png?format=750w",
iconWidth = 25,
iconHeight = 25)
leaflet(nudi_Adriatic_data) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(lat = ~decimalLatitude,
lng = ~decimalLongitude,
label = ~species,
icon = nudibranch)
leaflet(nudi_Adriatic_data) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(lat = ~decimalLatitude,
lng = ~decimalLongitude,
label = ~species,
icon = nudibranch)
sum(unique(nudi_Adriatic_data$species))
length(unique(nudi_Adriatic_data$species))
unique(nudi_Adriatic_data$species)
unique(tidyr::drop_na(nudi_Adriatic_data$species))
leaflet(nudibranch_Adriatic) %>%
addProviderTiles("Esri.WorldImagery") %>%
addMarkers(lat = ~decimalLatitude,
lng = ~decimalLongitude,
label = ~species,
icon = nudibranch)
nudibranch_Adriatic_gbif <-
occ_search(geometry = 'POLYGON((18.46 40.05, 22.03 42.26, 13.89 46.87, 8.68 46.36, 18.46 40.05))',
orderKey = 980,
limit = 5000)
nudibranch_Adriatic <- nudibranch_Adriatic_gbif$data
nudibranch_Adriatic <- nudibranch_Adriatic_gbif$data %>%
tidyr::drop_na(as.factor(species))
unique(nudibranch_Adriatic$species)
?name_suggest
name_suggest(q = "Nudibranchia")
name_suggest("Thysanote")
?occ_search
?name_suggest
q()
q()
